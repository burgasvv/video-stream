
create table if not exists image (
    id bigint generated by default as identity unique not null ,
    name varchar not null ,
    content_type varchar not null ,
    size bigint not null ,
    format varchar not null ,
    data bytea not null
);

create table if not exists authority (
    id bigint generated by default as identity unique not null ,
    name varchar not null unique
);

create table if not exists identity (
    id bigint generated by default as identity unique not null ,
    nickname varchar not null unique ,
    password varchar not null ,
    email varchar not null unique ,
    enabled boolean not null ,
    authority_id bigint references authority(id) on delete set null on update cascade,
    image_id bigint references image(id) on delete set null on update cascade
);

create table if not exists streamer (
    id bigint generated by default as identity unique not null ,
    firstname varchar not null ,
    lastname varchar not null ,
    patronymic varchar not null ,
    about text not null ,
    identity_id bigint references identity(id) on delete cascade on update cascade ,
    image_id bigint references image(id) on delete set null on update cascade
);

create table if not exists category (
    id bigint generated by default as identity unique not null ,
    name varchar not null unique ,
    description text not null ,
    image_id bigint references image(id) on delete set null on update cascade
);

create table if not exists streamer_category (
    streamer_id bigint references streamer(id) on delete cascade on update cascade ,
    category_id bigint references category(id) on delete cascade on update cascade ,
    added_at timestamp not null ,
    primary key (streamer_id, category_id)
);

create table if not exists stream (
    id bigint generated by default as identity unique not null ,
    name varchar not null ,
    streamer_id bigint references streamer(id) on delete set null on update cascade ,
    category_id bigint references category(id) on delete set null on update cascade ,
    stream_key uuid ,
    started timestamp not null ,
    ended timestamp ,
    is_live boolean not null ,
    is_secured boolean not null
);

create table if not exists invitation (
    id bigint generated by default as identity unique not null ,
    stream_id bigint references stream(id) on delete cascade on update cascade ,
    sender_id bigint references streamer(id) on delete cascade on update cascade ,
    receiver_id bigint references streamer(id) on delete cascade on update cascade ,
    stream_key uuid ,
    accept boolean ,
    decline boolean
);

create table if not exists invited_streamer (
    stream_id bigint references stream(id) on delete cascade on update cascade ,
    streamer_id bigint references streamer(id) on delete cascade on update cascade ,
    primary key (stream_id, streamer_id)
);

create table if not exists video (
    id bigint generated by default as identity unique not null ,
    category_id bigint references category(id) on delete set null on update cascade ,
    streamer_id bigint references streamer(id) on delete cascade on update cascade ,
    stream_id bigint references stream(id) on delete cascade on update cascade ,
    name varchar not null ,
    description text not null ,
    content_type varchar not null ,
    size bigint not null ,
    format varchar not null ,
    data bytea not null
);

create table if not exists follow (
    streamer_id bigint references streamer(id) on delete cascade on update cascade ,
    follower_id bigint references identity(id) on delete cascade on update cascade ,
    followed_at timestamp not null ,
    primary key (streamer_id, follower_id)
);

create table if not exists tariff (
    id bigint generated by default as identity unique not null ,
    plan varchar not null unique ,
    price bigint not null
);

create table if not exists subscription (
    id bigint generated by default as identity unique not null ,
    streamer_id bigint references streamer(id) on delete cascade on update cascade ,
    subscriber_id bigint references identity(id) on delete cascade on update cascade ,
    tariff_id bigint references tariff(id) on delete cascade on update cascade ,
    subscribed_at timestamp not null
);



-- POPULATIONS



insert into authority(name) values ('ROLE_ADMIN');
insert into authority(name) values ('ROLE_USER');
insert into authority(name) values ('ROLE_STREAMER');

insert into identity(nickname, password, email, enabled, authority_id)
values ('admin','$2a$10$hjGQw1hXYTnoLPYAmoaRmuaewrE7l6AKvGF2tvavTQafhBZslvknm','admin@gmail.com',true,1);
insert into identity(nickname, password, email, enabled, authority_id)
values ('user','$2a$10$1q729f8LLJKDqdpU.awktet06vA/Ea8eoAd2a5p9sUwVkvUP29Qp.','user@gmail.com',true,2);
insert into identity(nickname, password, email, enabled, authority_id)
values ('streamer','$2a$10$EL/JBpK2PaSDdBi1ELg0/e1wtfnVYgm.0yZrOXWnxPFvdanKlHnry',
        'streamer@gmail.com',true,3);
insert into identity(nickname, password, email, enabled, authority_id)
values ('streamerSecond','$2a$10$ITLCJ84A8J0oWe7eQNo8QugR8UlmSfUuKLuCKpwVqS6wCYCdmt5ia',
        'streamerSecond@gmail.com',true,3);

insert into streamer(firstname, lastname, patronymic, about, identity_id)
values ('Бутелёв', 'Владимир', 'Олегович', 'Информация о стримере streamer', 3);
insert into streamer(firstname, lastname, patronymic, about, identity_id)
values ('Моргаев', 'Аркадий', 'Владимирович', 'Информация о стримере streamerSecond', 4);

insert into category(name, description) VALUES ('Общение', 'Описание категории Общение');
insert into category(name, description) VALUES ('Игры', 'Описание категории Игры');
insert into category(name, description) VALUES ('АСМР', 'Описание категории АСМР');
insert into category(name, description) VALUES ('Музыка', 'Описание категории Музыка');
insert into category(name, description) VALUES ('Бассейны', 'Описание категории Бассейны');
insert into category(name, description) VALUES ('Сон', 'Описание категории Сон');
insert into category(name, description) VALUES ('Абстракция', 'Описание категории Абстракция');

insert into streamer_category(streamer_id, category_id, added_at)
values (1, 1, '2025-02-10 15:20');
insert into streamer_category(streamer_id, category_id, added_at)
values (1, 2, '2025-02-10 15:25');
insert into streamer_category(streamer_id, category_id, added_at)
values (1, 4, '2025-02-10 16:10');

insert into streamer_category(streamer_id, category_id, added_at)
values (2, 3, '2025-03-20 18:20');
insert into streamer_category(streamer_id, category_id, added_at)
values (2, 5, '2025-03-20 18:25');

insert into tariff(plan, price) values ('Monthly', 130);
insert into tariff(plan, price) values ('Annual', 1600);

insert into follow(streamer_id, follower_id, followed_at) values (2, 2, '2025-01-15 18:21:43');
insert into follow(streamer_id, follower_id, followed_at) values (1, 2, '2025-01-15 18:16:13');

insert into subscription(streamer_id, subscriber_id, tariff_id, subscribed_at)
VALUES (1, 2, 1, '2025-02-12 15:46:23');